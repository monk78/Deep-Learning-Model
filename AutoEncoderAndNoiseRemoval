{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"AutoEncoderAndNoiseRemoval","version":"0.3.2","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"metadata":{"id":"PSmmOO4zZDZ6","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"outputId":"046e7d89-4d2f-416d-8573-9bb06a29156b","executionInfo":{"status":"ok","timestamp":1546718491284,"user_tz":-330,"elapsed":6072,"user":{"displayName":"Varun Pandey","photoUrl":"","userId":"00254569025094859131"}}},"cell_type":"code","source":["from keras.datasets import mnist\n","import numpy as np\n","\n","(x_train, _), (x_test, _) = mnist.load_data()\n","\n","x_train = x_train.astype('float32') / 255.\n","x_test = x_test.astype('float32') / 255.\n","x_train = np.reshape(x_train, (len(x_train), 28, 28, 1))  # adapt this if using `channels_first` image data format\n","x_test = np.reshape(x_test, (len(x_test), 28, 28, 1))  # adapt this if using `channels_first` image data format\n","\n","noise_factor = 0.5\n","x_train_noisy = x_train + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_train.shape) \n","x_test_noisy = x_test + noise_factor * np.random.normal(loc=0.0, scale=1.0, size=x_test.shape) \n","\n","x_train_noisy = np.clip(x_train_noisy, 0., 1.)\n","x_test_noisy = np.clip(x_test_noisy, 0., 1.)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"metadata":{"id":"M7Yicu66nzLz","colab_type":"code","colab":{}},"cell_type":"code","source":["from keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D\n","from keras.models import Model\n","from keras import backend as K\n","from keras.callbacks import TensorBoard"],"execution_count":0,"outputs":[]},{"metadata":{"id":"e2IoekqmZKoY","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":125},"outputId":"e46c3261-05ae-4869-94ee-61099e1eef73","executionInfo":{"status":"ok","timestamp":1546718822948,"user_tz":-330,"elapsed":1703,"user":{"displayName":"Varun Pandey","photoUrl":"","userId":"00254569025094859131"}}},"cell_type":"code","source":["import matplotlib.pyplot as plt\n","n = 10\n","plt.figure(figsize=(20, 2))\n","for i in range(1,n):\n","    ax = plt.subplot(1, n, i)\n","    plt.imshow(x_test_noisy[i].reshape(28, 28))\n","    plt.gray()\n","    ax.get_xaxis().set_visible(False)\n","    ax.get_yaxis().set_visible(False)\n","plt.show()\n"],"execution_count":11,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAA/gAAABsCAYAAADexBlfAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJztnWW4JdW1tWeCBglwcbc0wS1oCMHd\n3Z3gAYK7OzQEDR6awCVo8Iu7EzQ4QYIED4FAcPL96vW9c/SpRZ199uE+dz/j/TU3Vad27ZK1qugx\n5vjBf/7zn/+EMcYYY4wxxhhj/k/zw//tHTDGGGOMMcYYY8zA8Qu+McYYY4wxxhjTA/gF3xhjjDHG\nGGOM6QH8gm+MMcYYY4wxxvQAfsE3xhhjjDHGGGN6gJFrC8cff/xS/+Mf/0jL1l133VL/8Y9/TMsm\nmmiiUr/77rutdmS66aZLn19++eVWf/eDH/yg1AwEmH322dN66623Xqkvv/zytGzcccct9S233NLq\ne2v89re/7bOOiHjrrbdK/c477zTuRzfDDd54441STznllGnZX/7yl1KvtdZaadmCCy5Y6t///vcD\n3o8pppiiz31S5p577lI/+uijjevtu+++6fOdd95Z6nvuuafx7xZbbLFS33777Y3rLbLIIqVecskl\n07L999+/8e+mmmqqUv/tb39rXK8/8DrncYyoH0vCc//666+nZXPMMUepn3jiibTstNNOK/XQoUNL\n/dJLL6X1eM1yf0cfffS03rffflvq2WabLS175JFH+tz34447Ln3ee++9S73iiiumZd98802pv/rq\nq1L/z//8T+P+Kk3jykCZYIIJSv3BBx80rrftttumzxxTxx577FLvtttuab0NN9yw1CONNFJaNmzY\nsD6/i+c3IuKjjz4q9V577VVqHpOIiB122KHUp5xySlrG3znjjDOWWu9Ljrd6j5GTTjqp1DvuuGNa\n9uyzz5Z6pplmSss4bm266aaN2+8PPK68lpVxxhknfeZxfe2110p95plnpvVuvvnmUs8888xp2TLL\nLFPqp59+unE9znfk7LPPTp+POeaYUr/wwgtp2YEHHljqn/3sZ6VeeeWV03q/+tWvSn3WWWf1+b39\nYc8990yf+Qxx7rnnDnj7w+H1fNBBB6Vl00wzTanbXjezzDJL+szx9oYbbuj3/g0GW2yxRal5TiMi\n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\nGGN6gP8HS7ZWOMl2+ywAAAAASUVORK5CYII=\n","text/plain":["<matplotlib.figure.Figure at 0x7f69e6d11c18>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"7eHJZw2RnnaA","colab_type":"code","colab":{}},"cell_type":"code","source":["input_img = Input(shape=(28, 28, 1))  # adapt this if using `channels_first` image data format\n","\n","x = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)\n","x = MaxPooling2D((2, 2), padding='same')(x)\n","x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\n","encoded = MaxPooling2D((2, 2), padding='same')(x)\n","\n","# at this point the representation is (7, 7, 32)\n","\n","x = Conv2D(32, (3, 3), activation='relu', padding='same')(encoded)\n","x = UpSampling2D((2, 2))(x)\n","x = Conv2D(32, (3, 3), activation='relu', padding='same')(x)\n","x = UpSampling2D((2, 2))(x)\n","decoded = Conv2D(1, (3, 3), activation='sigmoid', padding='same')(x)\n","\n","autoencoder = Model(input_img, decoded)\n","autoencoder.compile(optimizer='adadelta', loss='binary_crossentropy')"],"execution_count":0,"outputs":[]},{"metadata":{"id":"XnWi2WUTZKqq","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1751},"outputId":"edb5b6b0-1702-44de-900b-464cafbef3e0","executionInfo":{"status":"ok","timestamp":1546719303217,"user_tz":-330,"elapsed":362378,"user":{"displayName":"Varun Pandey","photoUrl":"","userId":"00254569025094859131"}}},"cell_type":"code","source":["autoencoder.fit(x_train_noisy, x_train,\n","                epochs=50,\n","                batch_size=128,\n","                shuffle=True,\n","                validation_data=(x_test_noisy, x_test),\n","                callbacks=[TensorBoard(log_dir='/tmp/tb', histogram_freq=0, write_graph=False)])"],"execution_count":14,"outputs":[{"output_type":"stream","text":["Train on 60000 samples, validate on 10000 samples\n","Epoch 1/50\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.1000 - val_loss: 0.1001\n","Epoch 2/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0996 - val_loss: 0.0994\n","Epoch 3/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0993 - val_loss: 0.0980\n","Epoch 4/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0991 - val_loss: 0.0976\n","Epoch 5/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0988 - val_loss: 0.0986\n","Epoch 6/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0987 - val_loss: 0.0985\n","Epoch 7/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0983 - val_loss: 0.0974\n","Epoch 8/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0982 - val_loss: 0.0973\n","Epoch 9/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0980 - val_loss: 0.0969\n","Epoch 10/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0978 - val_loss: 0.0986\n","Epoch 11/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0978 - val_loss: 0.0974\n","Epoch 12/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0975 - val_loss: 0.0981\n","Epoch 13/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0975 - val_loss: 0.0963\n","Epoch 14/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0974 - val_loss: 0.0970\n","Epoch 15/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0972 - val_loss: 0.0965\n","Epoch 16/50\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.0972 - val_loss: 0.0964\n","Epoch 17/50\n","60000/60000 [==============================] - 7s 123us/step - loss: 0.0970 - val_loss: 0.0965\n","Epoch 18/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0969 - val_loss: 0.0967\n","Epoch 19/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0969 - val_loss: 0.0961\n","Epoch 20/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0968 - val_loss: 0.0968\n","Epoch 21/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0967 - val_loss: 0.0976\n","Epoch 22/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0966 - val_loss: 0.0958\n","Epoch 23/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0965 - val_loss: 0.0972\n","Epoch 24/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0965 - val_loss: 0.0966\n","Epoch 25/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0964 - val_loss: 0.0955\n","Epoch 26/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0964 - val_loss: 0.0956\n","Epoch 27/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0963 - val_loss: 0.0954\n","Epoch 28/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0962 - val_loss: 0.0955\n","Epoch 29/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0960 - val_loss: 0.0964\n","Epoch 30/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0962 - val_loss: 0.0962\n","Epoch 31/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0962 - val_loss: 0.0954\n","Epoch 32/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0960 - val_loss: 0.0951\n","Epoch 33/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0959 - val_loss: 0.0951\n","Epoch 34/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0959 - val_loss: 0.0967\n","Epoch 35/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0958 - val_loss: 0.0951\n","Epoch 36/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0958 - val_loss: 0.0959\n","Epoch 37/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0957 - val_loss: 0.0954\n","Epoch 38/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0958 - val_loss: 0.0950\n","Epoch 39/50\n","60000/60000 [==============================] - 7s 122us/step - loss: 0.0957 - val_loss: 0.0965\n","Epoch 40/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0956 - val_loss: 0.0951\n","Epoch 41/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0956 - val_loss: 0.0956\n","Epoch 42/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0956 - val_loss: 0.0957\n","Epoch 43/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0955 - val_loss: 0.0951\n","Epoch 44/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0954 - val_loss: 0.0947\n","Epoch 45/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0954 - val_loss: 0.0948\n","Epoch 46/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0954 - val_loss: 0.0948\n","Epoch 47/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0954 - val_loss: 0.0947\n","Epoch 48/50\n","60000/60000 [==============================] - 7s 120us/step - loss: 0.0953 - val_loss: 0.0946\n","Epoch 49/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0953 - val_loss: 0.0950\n","Epoch 50/50\n","60000/60000 [==============================] - 7s 121us/step - loss: 0.0953 - val_loss: 0.0952\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["<keras.callbacks.History at 0x7f69d5dafe80>"]},"metadata":{"tags":[]},"execution_count":14}]},{"metadata":{"id":"QJwJ494aZKuA","colab_type":"code","colab":{}},"cell_type":"code","source":["decoded_imgs = autoencoder.predict(x_test)\n","\n","n = 10\n","plt.figure(figsize=(20, 4))\n","for i in range(n):\n","    # display original\n","    ax = plt.subplot(2, n, i)\n","    plt.imshow(x_test[i].reshape(28, 28))\n","    plt.gray()\n","    ax.get_xaxis().set_visible(False)\n","    ax.get_yaxis().set_visible(False)\n","\n","    # display reconstruction\n","    ax = plt.subplot(2, n, i + n)\n","    plt.imshow(decoded_imgs[i].reshape(28, 28))\n","    plt.gray()\n","    ax.get_xaxis().set_visible(False)\n","    ax.get_yaxis().set_visible(False)\n","plt.show()"],"execution_count":0,"outputs":[]},{"metadata":{"id":"-qLUYcZorfkM","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":897},"outputId":"78329113-539c-4af4-8bec-fca9a35861d0","executionInfo":{"status":"error","timestamp":1546719754545,"user_tz":-330,"elapsed":12605,"user":{"displayName":"Varun Pandey","photoUrl":"","userId":"00254569025094859131"}}},"cell_type":"code","source":["autoencoder.fit(x_train_noisy, x_train,\n","                epochs=50,\n","                batch_size=128,\n","                shuffle=True,\n","                validation_data=(x_test_noisy, x_test),\n","                callbacks=[TensorBoard(log_dir='/tmp/tb', histogram_freq=0, write_graph=True)])"],"execution_count":15,"outputs":[{"output_type":"stream","text":["Train on 60000 samples, validate on 10000 samples\n","Epoch 1/50\n","60000/60000 [==============================] - 7s 123us/step - loss: 0.0952 - val_loss: 0.0963\n","Epoch 2/50\n","34176/60000 [================>.............] - ETA: 2s - loss: 0.0953"],"name":"stdout"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-8ddfd6289a95>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m                 \u001b[0mshuffle\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m                 \u001b[0mvalidation_data\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test_noisy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m                 callbacks=[TensorBoard(log_dir='/tmp/tb', histogram_freq=0, write_graph=True)])\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, **kwargs)\u001b[0m\n\u001b[1;32m   1037\u001b[0m                                         \u001b[0minitial_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minitial_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1038\u001b[0m                                         \u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msteps_per_epoch\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1039\u001b[0;31m                                         validation_steps=validation_steps)\n\u001b[0m\u001b[1;32m   1040\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1041\u001b[0m     def evaluate(self, x=None, y=None,\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/engine/training_arrays.py\u001b[0m in \u001b[0;36mfit_loop\u001b[0;34m(model, f, ins, out_labels, batch_size, epochs, verbose, callbacks, val_f, val_ins, shuffle, callback_metrics, initial_epoch, steps_per_epoch, validation_steps)\u001b[0m\n\u001b[1;32m    197\u001b[0m                     \u001b[0mins_batch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mins_batch\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtoarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    198\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 199\u001b[0;31m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mins_batch\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    200\u001b[0m                 \u001b[0mouts\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mto_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    201\u001b[0m                 \u001b[0;32mfor\u001b[0m \u001b[0ml\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mzip\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout_labels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mouts\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   2713\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_legacy_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2714\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2715\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2716\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2717\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mpy_any\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mis_tensor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0minputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/keras/backend/tensorflow_backend.py\u001b[0m in \u001b[0;36m_call\u001b[0;34m(self, inputs)\u001b[0m\n\u001b[1;32m   2673\u001b[0m             \u001b[0mfetched\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_callable_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0marray_vals\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun_metadata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2674\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2675\u001b[0;31m             \u001b[0mfetched\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_callable_fn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0marray_vals\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2676\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mfetched\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0moutputs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2677\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1437\u001b[0m           ret = tf_session.TF_SessionRunCallable(\n\u001b[1;32m   1438\u001b[0m               \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_session\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_handle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstatus\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1439\u001b[0;31m               run_metadata_ptr)\n\u001b[0m\u001b[1;32m   1440\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1441\u001b[0m           \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]}]}